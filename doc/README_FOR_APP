Use this README file to introduce your application and point to useful places in the API for learning more.
Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.


1. 레일즈 프로젝트 생성
 	rails new YouCloth  -d=mysql
 	
2. devise 설치
a) Gemfile 에 devise 추가

#Authenticate
gem 'devise', '>= 2.0.4'

b) bundle install 실행 
 YouCloth> bundle install
 devise 를 최신버전으로 업데이트 하려면: gem update devise
 
c) generator 실행 
YouCloth> rails generate devise:install
      create  config/initializers/devise.rb
      create  config/locales/devise.en.yml
===============================================================================

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here 
     is an example of default_url_options appropriate for a development environment 
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { :host => 'localhost:3000' }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root :to => "home#index"

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

  4. If you are deploying Rails 3.1 on Heroku, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

===============================================================================

d)  add Devise to any of your models using the generator:  rails generate devise MODEL
 Replace MODEL by the class name used for the applications users, it's frequently 'User' but could also be 'Admin'. 
 This will create a model (if one does not exist) and configure it with default Devise modules. 
 Next, you'll usually run "rake db:migrate" as the generator will have created a migration file (if your ORM supports them). 
 This generator also configures your config/routes.rb file to point to Devise controller.
 
 YouCloth> rails generate devise User
 
 e) copy all views to your application:

  YouCloth> rails generate devise:views
  
 3. display the results of the 'index' action (method) in the 'home' controller.
 
  $ rails generate controller home index 
  
4. config/environments/development.rb

# In production, :host should be set to the actual host of your application.
  config.action_mailer.default_url_options = { :host => 'localhost:3000' }
  config.action_mailer.smtp_settings = {:enable_starttls_auto => false}


5. production env db:migrate
YouCloth$ RAILS_ENV=production rake db:migrate --trace

6. production env server start port:8000
YouCloth$ rails server -e production -p 8000

------------------
== Install passenger + Apache2 
$ sudo gem install passenger
$ passenger-install-apache2-module

Please edit your Apache configuration file, and add these lines:

   LoadModule passenger_module /home/jinny/.rvm/gems/ruby-1.9.3-head/gems/passenger-3.0.11/ext/apache2/mod_passenger.so
   PassengerRoot /home/jinny/.rvm/gems/ruby-1.9.3-head/gems/passenger-3.0.11
   PassengerRuby /home/jinny/.rvm/wrappers/ruby-1.9.3-head/ruby

After you restart Apache, you are ready to deploy any number of Ruby on Rails
applications on Apache, without any further Ruby on Rails-specific
configuration!

== Deploying a Ruby on Rails application: an example
$ vi /etc/apache2/sites-available/youcloth.kr
$ sudo a2ensite 

Suppose you have a Rails application in /somewhere. Add a virtual host to your
Apache configuration file and set its DocumentRoot to /somewhere/public:

   <VirtualHost *:80>
      ServerName www.yourhost.com
      DocumentRoot /somewhere/public    # <-- be sure to point to 'public'!
      <Directory /somewhere/public>
         AllowOverride all              # <-- relax Apache security settings
         Options -MultiViews            # <-- MultiViews must be turned off
      </Directory>
   </VirtualHost>

And that's it! You may also want to check the Users Guide for security and
optimization tips, troubleshooting and other useful information:

  /home/jinny/.rvm/gems/ruby-1.9.3-head/gems/passenger-3.0.11/doc/Users guide Apache.html

Enjoy Phusion Passenger, a product of Phusion (www.phusion.nl) :-)
http://www.modrails.com/

== Now, setup a basic Rails site with Apache and Passenger, changing example.com to your domain.

sudo mkdir -p /var/www/sites/example.com
sudo chown deploy.deploy /var/www/sites/example.com
sudo cat > /etc/apache2/sites-available/example.com <<EOF
<VirtualHost *:80>
    ServerName example.com
    DocumentRoot "/var/www/sites/example.com/current/public"
    ErrorLog "/var/log/apache2/example.com-error_log"
    CustomLog "/var/log/apache2/example.com-access_log" common
    <Directory "/var/www/sites/example.com/current/public">
        Options All
        AllowOverride All
        Order allow,deny
        Allow from all
    </Directory>
    RewriteEngine On
    # Remove the www
    RewriteCond %{HTTP_HOST} ^www.example.com$ [NC]
    RewriteRule ^(.*)$ http://example.com/$1 [R=301,L]
</VirtualHost>
EOF
sudo a2ensite example.com
sudo a2dissite default
su - deploy
mkdir -p /var/www/sites/example.com/shared/config/
cat > /var/www/sites/example.com/shared/config/database.yml <<EOF
production:
    adapter: mysql2
    encoding: utf8
    reconnect: false
    database: mydatabase
    pool: 5
    username: myusername
    password: myprecious
    socket: /var/run/mysqld/mysqld.sock
EOF
exit
sudo /etc/init.d/apache2 restart

== New in Active Record 3
https://github.com/mislav/will_paginate/wiki

# paginate in Active Record now returns a Relation
Post.where(:published => true).paginate(:page => params[:page]).order('id DESC')

# the new, shorter page() method
Post.page(params[:page]).order('created_at DESC')